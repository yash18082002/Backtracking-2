// Time Complexity : O(2 ^ n)
// Space Complexity : O(n)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no

class Solution {
    List<List<Integer>> result;
    public List<List<Integer>> subsets(int[] nums) {
        if(nums == null || nums.length == 0) {
            return new ArrayList<>();
        }
        result = new ArrayList<>();
        backtrack(nums, 0, new ArrayList<>());
        return result;
    }
    private void backtrack(int[] nums, int index, List<Integer> path) {
        // base
        if(index == nums.length) {
            result.add(new ArrayList<>(path));
            return;
        }
        // logic
        // 0 or do not choose case
        backtrack(nums, index + 1, path);
        //action
        path.add(nums[index]);
        // 1 or pick case
        backtrack(nums, index + 1, path);
        // backtrack
        path.remove(path.size() - 1);
    }
    // for loop based recursion
    // private void backtrack(int[] nums, int index, List<Integer> path) {
    //     result.add(new ArrayList<>(path));
    //     for(int i = index; i < nums.length; i++) {
    //         //action
    //         path.add(nums[i]);
    //         // recurse
    //         acktrack(nums, index + 1, path);
    //         // backtrack
    //         path.remove(path.size() - 1);
    //     }
    // }
}
